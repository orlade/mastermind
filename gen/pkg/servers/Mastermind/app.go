// Code generated by sysl DO NOT EDIT.
package mastermind

import (
	"context"
	"log"

	"github.com/anz-bank/sysl-go/config"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/handlerinitialiser"

	"github.com/orlade/mastermind/gen/pkg/servers/Mastermind/github"
)

// DownstreamClients for Mastermind
type DownstreamClients struct {
	githubClient *github.Client
}

// BuildDownstreamClients ...
func BuildDownstreamClients(ctx context.Context, hooks *core.Hooks, cfg *config.DefaultConfig) (*DownstreamClients, error) {
	downstreamConfig := cfg.GenCode.Downstream.(*DownstreamConfig)
	if downstreamConfig == nil {
		downstreamConfig = &DownstreamConfig{}
	}
	var err error
	githubHTTPClient, err := core.BuildDownstreamHTTPClient(
		"github",
		&downstreamConfig.Github,
	)
	if err != nil {
		return nil, err
	}
	githubClient := &github.Client{
		Client:  githubHTTPClient,
		URL:     downstreamConfig.Github.ServiceURL,
		Headers: downstreamConfig.Github.Headers,
	}

	return &DownstreamClients{
		githubClient: githubClient,
	}, err
}

// Serve starts the server.
//
// createService must be a function with the following signature:
//
//    func(ctx context.Context, config AppConfig) (*mastermind.ServiceInterface, *core.Hooks, error)
//
// where AppConfig is a type defined by the application programmer to
// hold application-level configuration.
//
// For a quick start, copy main.go.sample from the same directory as this
// file into its own package directory, rename it to main.go, and run it.
func Serve(
	ctx context.Context,
	createService interface{},
) error {
	err := core.Serve(
		ctx,
		&DownstreamConfig{}, createService, &ServiceInterface{},
		func(
			ctx context.Context,
			cfg *config.DefaultConfig,
			serviceIntf interface{},
			hooks *core.Hooks,
		) (interface{}, error) {
			serviceInterface := serviceIntf.(*ServiceInterface)

			if hooks == nil {
				hooks = &core.Hooks{}
			}

			var downstream *DownstreamConfig
			var is bool
			if downstream, is = cfg.GenCode.Downstream.(*DownstreamConfig); !is {
				downstream = &DownstreamConfig{
					ContextTimeout: 30,
				}
			}

			genCallbacks := config.NewCallback(
				&cfg.GenCode,
				downstream.ContextTimeout,
				hooks.MapError,
			)

			clients, err := BuildDownstreamClients(ctx, hooks, cfg)
			if err != nil {
				return nil, err
			}
			serviceHandler, err := NewServiceHandler(
				ctx,
				cfg,
				hooks,
				genCallbacks,
				serviceInterface,
				clients.githubClient,
			)
			if err != nil {
				return nil, err
			}

			// Construct a HTTPManager to wrap our HandlerInitialiser AKA ServiceRouter.
			// TODO standardise terminology / generally refactor.
			handlerInitialiser := NewServiceRouter(genCallbacks, serviceHandler)

			libraryConfig := &(cfg.Library)
			var adminServerConfig *config.CommonHTTPServerConfig // TODO make configurable
			var publicServerConfig *config.CommonHTTPServerConfig = &(cfg.GenCode.Upstream.HTTP)
			// TODO make it possible to disable handlers through configuration.
			enabledHandlers := []handlerinitialiser.HandlerInitialiser{handlerInitialiser}
			manager := core.NewHTTPManagerShim(libraryConfig, adminServerConfig, publicServerConfig, enabledHandlers)
			return manager, nil
		},
	)
	if err != nil {
		log.Print(err)
	}
	return err
}
